{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","turn","matrix","Array","fill","totalMoves","gameEnded","event","this","target","dataset","square","innerText","setState","result","checkWinner","winner","winmoves","board","i","length","id","align","onClick","e","clicked","className","data-square","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAmFeA,G,kBA/Eb,aAAc,IAAD,8BACX,+CACKC,MAAM,CACTC,KAAM,IACNC,OAAQC,MAAM,GAAGC,KAAK,IACtBC,WAAY,EACZC,WAAW,GANF,E,qEAWLC,GACgD,KAAnDC,KAAKR,MAAME,OAAOK,EAAME,OAAOC,QAAQC,UACxCH,KAAKR,MAAME,OAAOK,EAAME,OAAOC,QAAQC,QAAUH,KAAKR,MAAMC,KAC5DM,EAAME,OAAOG,UAAYJ,KAAKR,MAAMC,KACpCO,KAAKK,SAAS,CACZZ,KAAwB,MAAlBO,KAAKR,MAAMC,KAAW,IAAI,IAChCC,OAAQM,KAAKR,MAAME,OACnBG,WAAYG,KAAKR,MAAMK,gBAG3B,IAAIS,EAASN,KAAKO,cACJ,MAAXD,EACDN,KAAKK,SAAS,CACZG,OAAQ,oBACRV,WAAW,IAEM,MAAXQ,EACRN,KAAKK,SAAS,CACZG,OAAQ,oBACRV,WAAW,IAGM,SAAXQ,GACRN,KAAKK,SAAS,CACZG,OAAQ,gCACRV,WAAW,M,oCAUb,IAFA,IAAIW,EAAW,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,EAAE,IACzEC,EAAQV,KAAKR,MAAME,OACfiB,EAAE,EAAEA,EAAEF,EAASG,OAAOD,IAC5B,GAA2B,MAAvBD,EAAMD,EAASE,GAAG,KAAcD,EAAMD,EAASE,GAAG,MAAQD,EAAMD,EAASE,GAAG,KAAOD,EAAMD,EAASE,GAAG,MAAQD,EAAMD,EAASE,GAAG,IACjI,OAAOD,EAAMD,EAASE,GAAG,IAG7B,GAA6B,IAA1BX,KAAKR,MAAMK,WACZ,MAAO,S,+BAIJ,IAAD,OAER,OACE,yBAAKgB,GAAG,QACF,iDACA,qDACJ,yBAAKA,GAAG,QAAQC,MAAM,SAASC,QAAS,SAACC,GAAD,OAAK,EAAKC,QAAQD,KACtD,yBAAKE,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,MACpC,yBAAKD,UAAU,SAASC,cAAY,OAGxC,yBAAKN,GAAG,cAAcb,KAAKR,MAAMgB,a,GA5ErBY,cCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3842f9f7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nclass App extends Component{\n\n  constructor(){\n    super();\n    this.state={\n      turn: 'X',\n      matrix: Array(9).fill(''),\n      totalMoves: 0,\n      gameEnded: false\n    }\n  }\n   \n\n  clicked(event){\n    if(this.state.matrix[event.target.dataset.square] === ''){\n      this.state.matrix[event.target.dataset.square] = this.state.turn;\n      event.target.innerText = this.state.turn;\n      this.setState({\n        turn: this.state.turn==='X'?'O':'X',\n        matrix: this.state.matrix,\n        totalMoves: this.state.totalMoves++,\n      })\n    }\n    var result = this.checkWinner();\n    if(result === 'X'){\n      this.setState({\n        winner: 'WINNER PLAYER \"X\"',\n        gameEnded: true,\n      });\n    } else if(result === 'O'){\n      this.setState({\n        winner: 'WINNER PLAYER \"O\"',\n        gameEnded: true,\n  \n      });\n    } else if(result === 'draw'){\n      this.setState({\n        winner: 'Well played both it is a draw',\n        gameEnded: true,\n  \n      });\n    }\n\n    }\n\n    checkWinner(){\n      var winmoves = [[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6]];\n      var board = this.state.matrix;\n      for(let i=0;i<winmoves.length;i++){\n        if((board[winmoves[i][0]]!=null) && board[winmoves[i][0]] === board[winmoves[i][1]] && board[winmoves[i][1]] === board[winmoves[i][2]]){\n          return board[winmoves[i][0]];\n        }\n      }\n      if(this.state.totalMoves === 9){\n        return 'draw';\n      }\n      \n    }\n  render(){\n  \n  return (\n    <div id=\"game\">\n          <h1>LET'S TIC TAC TOE</h1>\n          <h3>Player 1:X Player 2:O</h3>\n      <div id=\"board\" align=\"center\" onClick={(e)=>this.clicked(e)}>\n          <div className=\"square\" data-square=\"0\"></div>\n          <div className=\"square\" data-square=\"1\"></div>\n          <div className=\"square\" data-square=\"2\"></div>\n          <div className=\"square\" data-square=\"3\"></div>\n          <div className=\"square\" data-square=\"4\"></div>\n          <div className=\"square\" data-square=\"5\"></div>\n          <div className=\"square\" data-square=\"6\"></div>\n          <div className=\"square\" data-square=\"7\"></div>\n          <div className=\"square\" data-square=\"8\"></div>\n          \n      </div>\n      <div id=\"gameresult\">{this.state.winner}</div>\n    </div>\n      );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}